<?xml version="1.0"?>
<launch>
  <arg name="namespace" default="test"/>
  <arg name="enable_logging" default="false"/>
  <arg name="log_file" default="$(arg namespace)"/>
  <arg name="lidar_type" default="vlp-16"/>
  <arg name="lidar_gpu" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.1"/>
  <arg name="globally_shared_map" default="false"/>
  <arg name="enable_rviz" default="false"/>
  <arg name="enable_bt" default="false"/>
  <arg name="tree_file" default="test_tree.xml"/>
  
  <group ns="$(arg namespace)">
  <!-- Spawn Turtlebot3 -->
      <param name="robot_description" command="$(find xacro)/xacro '$(find mae_simulator)/urdf/turtlebot3_burger.urdf.xacro' 
                                             namespace:=$(arg namespace)" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
    </node>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg namespace) -x $(arg x) -y $(arg y) -z $(arg z) -Y 0 -param robot_description" />
 

  <!-- Octomap -->
      <node pkg="octomap_server" type="octomap_server_node" name="octomap_server" unless="$(arg globally_shared_map)">
        
        <param name="resolution" value="0.17" />
        <param name="latch" value="false" />
        <param name="frame_id" type="string" value="world" />
        <param name="sensor_model/max_range" value="40" />
        <!-- <param name="occupancy_min_z" value="0.15"/>
        <param name="occupancy_max_z" value="1.5"/> -->

        <param name="pointcloud_min_z" value="0.2"/>
        <param name="pointcloud_max_z" value="2"/>
        
        <remap from="cloud_in" to="/$(arg namespace)/velodyne_points" />
    
      </node>

  <!-- 2d Navigation -->
    <node name="move_base" pkg="move_base" type="move_base"  output="screen" respawn="false">
      <rosparam file="$(find mae_control)/config/turtle/costmap_common_params_burger.yaml" command="load" ns="global_costmap" >
        <arg name="namespace" value ="$(arg namespace)"/>
      </rosparam>
      <rosparam file="$(find mae_control)/config/turtle/costmap_common_params_burger.yaml" command="load" ns="local_costmap" >
        <arg name="namespace" value ="$(arg namespace)"/>
      </rosparam>
     
      <rosparam file="$(find mae_control)/config/turtle/local_costmap_params.yaml" command="load" subst_value="true">
        <arg name="namespace" value ="$(arg namespace)"/>
      </rosparam>
      <rosparam file="$(find mae_control)/config/turtle/global_costmap_params.yaml" command="load" subst_value="true">
        <arg name="namespace" value ="$(arg namespace)"/>
      </rosparam>
      <rosparam file="$(find mae_control)/config/turtle/dwa_local_planner_params_burger.yaml" command="load" />
      <rosparam file="$(find mae_control)/config/turtle/move_base_params.yaml" command="load" />

    <remap from="/$(arg namespace)/odom" to="/$(arg namespace)/ground_truth/odometry"/> 
            
    </node>
  <!-- Rviz -->
    <node pkg="rviz" type="rviz" name="$(arg namespace)_rviz" respawn="false" output="screen" args="-d $(find mae_simulator)/rviz/lidar.rviz" if="$(arg enable_rviz)" >
      <remap from="/move_base_simple/goal" to="/$(arg namespace)/move_base_simple/goal"/>
      <remap from="/lidar_points_topic" to="/$(arg namespace)/velodyne_points"/>
      <remap from="/occupied_cells_vis_array" to="/$(arg namespace)/occupied_cells_vis_array" unless="$(arg globally_shared_map)"/>
      <remap from="/projected_map" to="/$(arg namespace)/projected_map" unless="$(arg globally_shared_map)"/> 

      <remap from="/local_costmap" to="/$(arg namespace)/move_base/local_costmap/costmap"/>
      <remap from="/footprint" to="/$(arg namespace)/move_base/global_costmap/footprint"/>
      <remap from="/global_costmap" to="/$(arg namespace)/move_base/global_costmap/costmap"/>
      <remap from="/current_goal" to="/$(arg namespace)/move_base/current_goal"/>
      <remap from="/plan" to="/$(arg namespace)/move_base/NavfnROS/plan"/>
      <remap from="/local_plan" to="/$(arg namespace)/move_base/EBandPlannerROS/global_plan"/>
      <remap from="/frontiers_viz" to="/$(arg namespace)/frontiers_viz"/>
      
    </node>

<!-- Frontier Generation package -->
    <node pkg="mae_frontier_generation" type="frontier_generation_node" name="frontier_generation_node" output="screen" >
      <remap from="/map_in" to="/$(arg namespace)/projected_map"/>
      <remap from="/frontiers_out" to="/$(arg namespace)/frontiers"/>
      <remap from="/frontiers_viz_out" to="/$(arg namespace)/frontiers_viz"/>
      <remap from= "/blacklist_pt_in" to="/$(arg namespace)/blacklist_pt"/>
      <remap from= "/exploration_area_out" to="/$(arg namespace)/exploration_area"/>
    </node>
  </group>
   
  <!-- Behavior Tree Controller -->
    <group if="$(arg enable_bt)">
      <node pkg="mae_btrees" type="bt_node" name="behavior_tree_node" output="screen" launch-prefix="konsole -e" >
		    <param name="file" value="$(arg tree_file)"/>
	    </node>
	    <node name="groot" pkg="groot" type="Groot" output="screen"/>
    </group>
    
</launch>