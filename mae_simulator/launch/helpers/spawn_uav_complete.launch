<?xml version="1.0"?>
<launch>
  <arg name="namespace" default="test"/>
  <arg name="enable_logging" default="false"/>
  <arg name="log_file" default="$(arg namespace)"/>
  <arg name="lidar_type" default="vlp-16"/>
  <arg name="lidar_gpu" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.1"/>
  <arg name="tree_file" default="main_tree.xml"/>
  <arg name="rviz" default="false"/>
  <arg name="model" default="$(find mae_simulator)/urdf/mav_generic_odometry_and_lidar.xacro"/>
  
  <group ns="$(arg namespace)">
  <!-- Spawn UAV -->
      <!-- send the robot XML to param server -->
    <param name="robot_description" command="
      $(find xacro)/xacro '$(arg model)'
      enable_logging:=$(arg enable_logging)
      enable_ground_truth:=$(arg enable_ground_truth)
      enable_mavlink_interface:=false
      log_file:=$(arg log_file)
      wait_to_record_bag:=false
      mav_name:=$(arg namespace)
      namespace:=$(arg namespace)
      lidar_type:=$(arg lidar_type)
      gpu:=$(arg lidar_gpu)"
    />
    <param name="tf_prefix" type="string" value="$(optenv ROS_NAMESPACE)" />

    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_$(arg namespace)" pkg="gazebo_ros" type="spawn_model"
    args="-param robot_description
          -urdf
          -x $(arg x)
          -y $(arg y)
          -z $(arg z)
          -model $(arg namespace)"
    respawn="false" output="log">
    </node>
  <!-- Control Nodes -->
      <node name="$(arg namespace)_position_controller_node" pkg="rotors_control" type="lee_position_controller_node">
        <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_neo11.yaml" />
        <rosparam command="load" file="$(find rotors_gazebo)/resource/neo11.yaml" />
        <remap from="odometry" to="ground_truth/odometry" />
      </node>

      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
      
      <node name="vel_controller_node" pkg="mae_control" type="vel_controller_node.py"/>
    
     <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
        
        <param name="resolution" value="0.18" />
        <param name="latch" value="false" />
        <param name="frame_id" type="string" value="world" />
        <param name="sensor_model/max_range" value="10" />
        <!-- <param name="occupancy_min_z" value="0.15"/>
        <param name="occupancy_max_z" value="1.5"/> -->
        <param name="incremental_2D_projection" value="true"/>
        <param name="pointcloud_min_z" value="0.15"/>
        <param name="pointcloud_max_z" value="2"/>
        
        <remap from="cloud_in" to="/$(arg namespace)/combined_pcl" />
    
    </node>


  <arg name="map_topic" value ="/$(arg namespace)/filtered_map" />
  <!-- 2d Navigation -->
    <node name="move_base" pkg="move_base" type="move_base"  output="log" respawn="false">
      <rosparam file="$(find mae_control)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find mae_control)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find mae_control)/config/local_costmap_params.yaml" command="load" subst_value="true">
        <arg name="namespace" value ="$(arg namespace)"/>
        <arg name="map_topic" value ="$(arg map_topic)"/>
      </rosparam>
      <rosparam file="$(find mae_control)/config/global_costmap_params.yaml" command="load" subst_value="true">
        <arg name="namespace" value ="$(arg namespace)"/>
        <arg name="map_topic" value ="$(arg map_topic)"/>
      </rosparam>
      <rosparam file="$(find mae_control)/config/base_local_planner_params.yaml" command="load" />

      <remap from="/$(arg namespace)/cmd_vel" to="/$(arg namespace)/command/cmd_vel"/>
      <remap from="/$(arg namespace)/odom" to="/$(arg namespace)/ground_truth/odometry"/>       
    </node>

    
     
   

    <!-- Frontier Generation package -->
    <node pkg="mae_frontier_generation" type="frontier_generation_node" name="frontier_generation_node" output="screen">
      <remap from="/map_in" to="/$(arg namespace)/projected_map"/>
      <remap from="/frontiers_out" to="/$(arg namespace)/frontiers"/>
      <remap from="/frontiers_viz_out" to="/$(arg namespace)/frontiers_viz"/>
      <remap from= "/blacklist_pt_in" to="/$(arg namespace)/blacklist_pt"/>
      <remap from= "/exploration_area_out" to="/$(arg namespace)/exploration_area"/>
    </node>  
    
     <node name="global_planner_node" pkg="mae_global_planner" type="global_planner_node" output="screen"/>

    <node name="drone_comm_node" pkg="mae_utils" type="drone_comm_node.py"  output="screen">
    </node>


  <!-- Behavior Tree Controller -->

      <node pkg="mae_btrees" type="bt_node" name="behavior_tree_node" output="screen" >
		    <param name="file" value="$(arg tree_file)"/>
	    </node>
	    <!-- <node name="groot" pkg="groot" type="Groot" output="screen"/> -->
   
     <node pkg="rviz" type="rviz" name="single_rviz" respawn="false" output="screen" args="-d $(find mae_simulator)/rviz/single.rviz" if="$(arg rviz)">
        <remap from="/map" to="/$(arg namespace)/filtered_map"/>
        <remap from="/octomap" to="/$(arg namespace)/occupied_cells_vis_array"/>
        <remap from="/robot_description" to="/$(arg namespace)/robot_description"/>
        <remap from="/goal" to="/$(arg namespace)/move_base/current_goal"/>
        <remap from="/move_base_simple/goal" to="/$(arg namespace)/move_base_simple/goal"/>
        <remap from="/combined_pcl" to="/$(arg namespace)/combined_pcl"/>
        <remap from="/path" to="/$(arg namespace)/move_base/NavfnROS/plan"/>
        <remap from="/frontiers" to="/$(arg namespace)/frontiers_viz"/>
        <remap from="/global_plan" to="/$(arg namespace)/markers"/>
        
     </node>

    
     
  </group>
  
</launch>