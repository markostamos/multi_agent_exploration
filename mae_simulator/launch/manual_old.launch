<launch>
  <arg name="mav_name" default="neo11"/>
  <arg name="world_name" default="cave"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="lidar_gpu" default="true"/>
  <!-- Set true to spawn 3 UAVS -->
  <arg name="many" default="false"/>

  <arg name="globally_shared_map" default="true"/>


  <!-- Set True to open an rviz window for each UAV -->
  <arg name="individual_rviz" default="true"/>
  <!-- Set True to open a global rviz window with all UAV positions -->
  <arg name="global_rviz" default="false"/>





  <arg name="verbose" default="false"/>


  <!-- GAZEBO  -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(find mae_simulator)/worlds/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find mae_simulator)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
   
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
  
  </include>

  
  <!-- SPAWN A UAV -->
  <include file="$(find mae_simulator)/launch/helpers/single_drone_spawn.launch">

    <!-- UAV name -->
    <arg name="namespace" value="drone1"/>

    <!-- Drone position -->
    <arg name="x" default="-1.5"/>
    <arg name="y" default="-21"/>
    <arg name="z" default="0.5"/>
    <!-- RVIZ for this UAV-->
    <arg name="enable_rviz" value="$(arg individual_rviz)"/>
    
    
    <arg name="globally_shared_map" value="$(arg globally_shared_map)"/>
    <arg name="enable_ground_truth" default="$(arg enable_ground_truth)"/>
    <arg name="enable_logging" value="$(arg enable_logging)"/>
    <arg name="lidar_gpu" default="$(arg lidar_gpu)"/>

  </include>

  <include file="$(find mae_simulator)/launch/helpers/single_drone_spawn.launch" if="$(arg many)">
 
    <!-- UAV name -->
    <arg name="namespace" value="drone2"/>

    <!-- Drone position -->
   
    <arg name="x" default="12.789"/>
    <arg name="y" default="-8.672"/>
    <arg name="z" default="0.2"/>


    <!-- RVIZ for this UAV-->
    <arg name="enable_rviz" value="$(arg individual_rviz)"/>
    
    
    <arg name="globally_shared_map" value="$(arg globally_shared_map)"/>
    <arg name="enable_ground_truth" default="$(arg enable_ground_truth)"/>
    <arg name="enable_logging" value="$(arg enable_logging)"/>
    <arg name="lidar_gpu" default="$(arg lidar_gpu)"/>

  </include>


  <group if="$(arg globally_shared_map)">
    <!-- Create a global octomap server-->
    <node pkg="octomap_server" type="octomap_server_node" name="global_octomap_server" if="$(arg globally_shared_map)">     
          <param name="resolution" value="0.15" />
          <param name="latch" value="false" />
          <param name="frame_id" type="string" value="world" />
          <param name="sensor_model/max_range" value="100" />
          <param name="occupancy_min_z" value="0.15"/>
          <remap from="cloud_in" to="/combined_pcl"/>
    </node>

    <!-- Point cloud sharing for global octomap server -->
    <node name="pcl_reposter" pkg="mae_utils" type="point_cloud_reposter_node.py" output="screen" if="$(arg globally_shared_map)" />
 

    <!-- Create a global rviz with all drone positions and complete map -->
    <node pkg="rviz" type="rviz" 
          name="global_rviz" 
          respawn="false" 
          output="screen" 
          args="-d $(find mae_simulator)/rviz/global.rviz"
          if = "$(arg global_rviz)">
        
        <remap from="/drone1_loc" to="/drone1/ground_truth/position"/>
        <remap from="/drone2_loc" to="/drone2/ground_truth/position"/>
        <remap from="/drone3_loc" to="/drone3/ground_truth/position"/> 
    </node>
  </group>
  
  



 
  
</launch>
