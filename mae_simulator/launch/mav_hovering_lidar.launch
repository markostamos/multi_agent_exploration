<launch>
  <arg name="mav_name" default="neo11"/>
  <arg name="world_name" default="maze1"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="lidar_type" default="vlp-16"/>
  <arg name="lidar_gpu" default="true"/>
  
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find mae_simulator)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find mae_simulator)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find mae_simulator)/urdf/mav_generic_odometry_and_lidar.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="lidar_type" value="$(arg lidar_type)"/>
      <arg name="lidar_gpu" value="$(arg lidar_gpu)"/>
    </include>

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="ground_truth/odometry" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    
    
    
    
    <node name="rviz_goal_publisher_node" pkg="mae_control" type="rviz_goal_publisher_node.py" output="screen"/>
    <node name="vel_controller_node" pkg="mae_control" type="vel_controller_node.py" output="screen"/>

    <node name="base_footprint_publisher_node" pkg="mae_utils" type="base_footprint_publisher_node.py" output="screen"/>
    

    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
      <param name="resolution" value="0.05" />
      
      <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
      <param name="frame_id" type="string" value="world" />
      
      <!-- maximum range to integrate (speedup!) -->
      <param name="sensor_model/max_range" value="100" />
      <param name="base_frame_id" value="$(arg mav_name)/base_footprint"/>
      
      <param name="filter_ground" value="true"/> 
      <param name="occupancy_min_z" value="0.07"/>
     
      
      
      
      <!-- data source to integrate (PointCloud2) -->
      <remap from="cloud_in" to="/$(arg mav_name)/velodyne_points" />
	
	    </node>

  <node pkg="rviz" type="rviz" name="rviz" respawn="false" output="screen" args="-d $(find mae_simulator)/rviz/lidar.rviz" />

  </group>

  

  
</launch>
